**************
Add a REST API
**************

**Last Updated:** May 2020

In this tutorial you will add a REST API endpoint to the Earth Engine app. This will provide a programmatic access point to the data hosted by your app. Topics covered in this tutorial include:

* REST APIs in Tethys Apps
* Django REST Framework
* Token Authentication
* UrlMaps
* Controllers in Multiple Files
* Developing REST APIs with Postman

0. Start From Previous Solution (Optional)
==========================================

If you wish to use the previous solution as a starting point:

.. parsed-literal::

    git clone https://github.com/tethysplatform/tethysapp-earth_engine.git
    cd tethysapp-earth_engine
    git checkout -b clip-by-asset-solution clip-by-asset-solution-|version|

1. Reorganize Controller Functions into Separate Files
======================================================

The ``controllers.py`` file is getting quite long...

1. Create a new folder called :file:`controllers` in the :file:`earth_engine` directory with the following new empty Python modules in it:

    * :file:`controllers/`
        * :file:`__init__.py`
        * :file:`home.py`
        * :file:`viewer.py`
        * :file:`rest.py`

    .. note::

        A folder with a file named :file:`__init__.py` is called a Python package.

2. Copy the ``home`` and ``about`` controller functions, with any imports they need into the new :file:`controllers/home.py` module

3. Copy the ``viewer``, ``get_image_collection``, and ``get_time_series_plot`` controller functions with any imports they need into the new :file:`controllers/viewer.py` module.

4. Update the ``UrlMaps`` in :file:`app.py` to point to the new locations of the controllers:

5. Delete the old :file:`controllers.py` file.

6. Navigate to `<http://localhost:8000/apps/earth-engine/>`_ and verify that the app functions as it did before the change.

2. Create New UrlMap and Controller for REST API Endpoint
=========================================================

1. Create a new controller function named ``get_time_series`` in :file:`controllers/rest.py` with the following contents:

2. Add a new ``UrlMap`` for the ``get_time_series`` controller to :file:`app.py`:

3. Navigate to `<http://localhost:8000/apps/earth-engine/api/get-time-series/>`_. You should see an API page that is auto generated by the `Django REST Framework <https://www.django-rest-framework.org/>`_ titled **Get Time Series**. The page should display an *HTTP 401 Unauthorized* error and display a result object with detail "Authentication credentials were not provided."

3. Test with Postman Application
================================

Testing REST APIs is most easily done with a REST client like Postman.

1. If you have not done so already, `download and install the Postman app <https://www.postman.com/>`_ and then launch it.

2. In Postman click on the **New** and select Collection.

3. Name the collection "Earth Engine App API" and press the **Create** button.

4. Right-click on the new *Earth Engine App API* collection or click on it's dot menu and select **Add Request**.

5. Name the new request "get-time-series" and press the **Save to Earth Engine App API** button.

6. From the menu on the left, expand the *Earth Engine App API* collection and click on the *get-time-series* request to open it in a new tab.

7. Select **GET** as the method and enter "http://localhost:8000/apps/earth-engine/api/get-time-series/" in the URL field.

8. Press the **Save** button to save changes.

9. Press the **Send** button. You should see the same response object as before with the "Authentication credentials were not provided." message.

4. Add Token Authorization Headers to Postman Request
=====================================================

1. Navigate to `<http://localhost:8000/>` and sign in if necessary.

2. Click on the button with your username on it in the top-right-hand corner of the page to access your user profile.

3. Copy the value of the API Key.

4. In Postman, click on the Authorization tab, just under the URL field.

5. Select "API Key" as the **TYPE** and enter the "Authorization" for the **Key** and "Token <your token>" for the value (replace ``<your token>`` with the token you copied).

6. Press the **Send** button again. This time the request should be sent with the proper authorization token. You should see a response object with the "Hello, World!" message.

7. Press the **Save** button to save your changes to the Postman request.

5. Define Parameters for REST API
=================================

1. Update the ``get_time_series`` controller in :file:`controllers/rest.py` as follows: (get GET/POST parameters and add to response object so that it is an echo function).

2. In Postman, select the **Params** tab.

3. Click on the **Bulk Edit** link located at the top-right corner of the **Params** tab and enter the following:

.. code-block::

    platform:modis
    sensor:terra
    product:temperature
    start_date:2020-01-01
    end_date:2020-04-14
    reducer:mean
    index:NDVI
    geometry:{"type":"GeometryCollection","geometries":[{"type":"Point","coordinates":[36.112060546875,-0.03295898255728957],"properties":{"id":"drawing_layer.79c08238-4084-4825-9e76-f018527d45b7"},"crs":{"type":"link","properties":{"href":"http://spatialreference.org/ref/epsg/4326/proj4/","type":"proj4"}}},{"type":"Polygon","coordinates":[[[36.749267578125,0.1867672473697155],[36.6943359375,-0.043945308191354115],[36.99096679687499,-0.043945308191354115],[36.9140625,0.1757809742470755],[36.749267578125,0.1867672473697155]]],"properties":{"id":"drawing_layer.ffa36dfd-5767-4946-890b-f4c0d9c0ff9f"},"crs":{"type":"link","properties":{"href":"http://spatialreference.org/ref/epsg/4326/proj4/","type":"proj4"}}}]}
    orient:series
    scale:250

4. Press the **Send** button and verify that the parameters are returned in the response object.

6. Validate Platform, Sensor, Product, and Index
================================================

1. Modify the ``get_time_series`` controller in :file:`controllers/rest.py` to add validation for the ``platform``, ``sensor``, ``product``, and ``index`` parameters as follows:

2. In Postman, select the **Params** tab if not already active and press the **Key-Value Edit** link at the top-right corner of the tab.

3. Uncheck all of the parameters so that they are not included in the request.

4. Press the **Send** button and verify that the status code *400 Bad Request* is returned (see top-right side of the response section) and the validation message for the ``platform`` parameter is returned.

5. Add the ``platform`` parameter to the request by checking the box next to it.

6. Press the **Send** button and verify that the status code *400 Bad Request* is returned (see top-right side of the response section) and the validation message for the ``sensor`` parameter is returned.

7. Change the value of the ``platform`` parameter to "landsat" or "sentinel" and verify that the validation message for the ``sensor`` parameter lists the appropriate sensors.

8. Repeat this process, adding first the ``product`` parameter and then the ``index parameter`` to confirm that the validation logic is working as expected.

7. Validate Dates
=================

There is logic that already exists in the ``viewer`` controller that you can use to validate the date parameters in our REST API function. However, you should avoid copying code to prevent duplicating bugs and make the app easier to maintain. Instead, we'll generalize the bit of code from the ``viewer`` controller into a helper function and then use that function in both the ``viewer`` controller and the ``get_time_series`` controller.

1. Create a new helper function called ``compute_dates_for_product`` in :file:`helpers.py` with contents based on the validation logic for dates in the ``viewer`` controller:

2. Refactor the ``viewer`` controller in :file:`controllers/viewer.py`` to use the new ``compute_dates_for_product`` helper function:

3. Modify the ``get_time_series`` controller in :file:`controllers/rest.py` to add validation for the ``start_date`` and ``end_date`` parameters as follows:

4. Use the technique from steps 6.5 - 6.8 to test the ``start_date`` and ``end_date`` parameters using Postman.

5. Also test different values for dates to test the following scenarios:

    * ``start_date`` == ``end_date``
    * ``start_date`` > ``end_date``
    * ``start_date`` < ``end_date``
    * ``start_date`` outside of valid range of selected product (see :file:`gee/products.py`)
    * ``end_date`` outside of valid range of selected product (see :file:`gee/products.py`)
    * ``start_date`` and ``end_date`` outside of valid range of selected product (see :file:`gee/products.py`)
    * Incorrect date format given for either date parameter

8. Validate Reducer, Orient, and Scale
======================================



9. Validate Geometry
====================

10. Reuse Existing Helper Function to Get Time Series
=====================================================

11. Test & Verify
=================

12. Solution
============

This concludes this portion of the GEE Tutorial. You can view the solution on GitHub at `<https://github.com/tethysplatform/tethysapp-earth_engine/tree/rest-api-solution-solution-3.0>`_ or clone it as follows:

.. parsed-literal::

    git clone https://github.com/tethysplatform/tethysapp-earth_engine.git
    cd tethysapp-earth_engine
    git checkout -b rest-api-solution-solution rest-api-solution-solution-|version|
