# -*- coding: utf-8 -*-
#
# Tethys Platform documentation build configuration file, created by
# sphinx-quickstart on Sat Oct 18 17:30:09 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
from setuptools_scm import get_version
import os
from pathlib import Path
import subprocess
import sys
from unittest import mock

import django
from django.conf import settings

# Mock Dependencies
# NOTE: No obvious way to automatically anticipate all the sub modules without
# installing the package, which is what we are trying to avoid.
MOCK_MODULES = [
    "bokeh",
    "bokeh.core.templates",
    "bokeh.document",
    "bokeh.embed",
    "bokeh.embed.elements",
    "bokeh.embed.util",
    "bokeh.resources",
    "bokeh.settings",
    "bokeh.server.django",
    "bokeh.server.django.consumers",
    "bokeh.util.compiler",
    "channels",
    "channels.consumer",
    "conda",
    "conda.cli",
    "conda.cli.python_api",
    "condorpy",
    "django_gravatar",
    "dask",
    "dask.delayed",
    "dask.distributed",
    "distributed",
    "distributed.protocol",
    "distributed.protocol.serialize",
    "distro",
    "docker",
    "docker.types",
    "docker.errors",
    "guardian",
    "guardian.admin",
    "guardian.models",
    "guardian.shortcuts",
    "mfa",
    "mfa.models",
    "model_utils",
    "model_utils.managers",
    "plotly",
    "plotly.offline",
    "shapefile",
    "siphon",
    "siphon.catalog",
    "siphon.http_util",
    "social_core",
    "social_core.exceptions",
    "social_django",
    "social_django.utils",
    "sqlalchemy",
    "sqlalchemy.orm",
    "tethys_apps.harvester",
    "tethys_apps.models",  # Mocked to prevent issues with loading apps during docs build.
    "tethys_compute.utilities",  # Mocked to prevent issues with DictionaryField and List Field during docs build.
    "yaml",
]


# Mock dependency modules so we don't have to install them
# See: https://docs.readthedocs.io/en/latest/faq.html#i-get-import-errors-on-libraries-that-depend-on-c-modules
class MockModule(mock.MagicMock):
    @classmethod
    def __getattr__(cls, name):
        return mock.MagicMock()


print(
    "NOTE: The following modules are mocked to prevent timeouts during the docs build process on RTD:"
)
print("{}".format(", ".join(MOCK_MODULES)))
sys.modules.update((mod_name, MockModule()) for mod_name in MOCK_MODULES)

# Fixes django settings module problem
sys.path.insert(0, os.path.abspath(".."))

installed_apps = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tethys_config",
    "tethys_quotas",
    "tethys_apps",
    "tethys_gizmos",
    "tethys_services",
    "tethys_compute",
    "tethys_layouts",
]

settings.configure(
    INSTALLED_APPS=installed_apps,
    DEBUG=True,
    SECRET_KEY="QNT5VImbg7PktTYfyXZWGwfKqOe1G3CanQWfG0zsE5HZxwHdQs",
)
django.setup()

# Sphinx extensions
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx_autodoc_typehints",
    "sphinx.ext.extlinks",
    "sphinx.ext.todo",
    "sphinxarg.ext",
    "sphinxawesome_theme",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Tethys Platform"
copyright = "2023, Tethys Platform"

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org
on_rtd = os.environ.get("READTHEDOCS") == "True"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
release = get_version(root="..", relative_to=__file__)

# major/minor
version = ".".join(release.split(".")[:2])

# Determine branch
git_directory = Path(__file__).parent.parent
ret = subprocess.run(
    ["git", "-C", git_directory, "rev-parse", "--abbrev-ref", "HEAD"],
    capture_output=True,
)
branch = ret.stdout.decode().strip() if ret.returncode == 0 else "release"

rst_epilog = """
.. |branch| replace:: {branch}
""".format(
    branch=branch
)

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_build"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
smartquotes = False

# Output file base name for HTML help builder.
htmlhelp_basename = f"{project}doc"

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        "index",
        "TethysPlatform.tex",
        "Tethys Platform Documentation",
        "Nathan Swain",
        "manual",
    ),
]

# markup to shorten external links (see: http://www.sphinx-doc.org/en/stable/ext/extlinks.html)
install_tethys_link = "https://raw.githubusercontent.com/tethysplatform/tethys/{}/scripts/install_tethys.%s".format(
    branch
)

extlinks = {"install_tethys": (install_tethys_link, None)}

# -- Options for manual page output ---------------------------------------
# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ("index", "tethysplatform", "Tethys Platform Documentation", ["Nathan Swain"], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        "TethysPlatform",
        "Tethys Platform Documentation",
        "Nathan Swain",
        "TethysPlatform",
        "One line description of project.",
        "Miscellaneous",
    ),
]

# If this is True, todo and todolist produce output, else they produce nothing. The default is False.
todo_include_todos = True

# If this is True, todo emits a warning for each TODO entries. The default is False.
todo_emit_warnings = True

html_title = f"{project} Documentation"
html_short_title = "Tethys Docs"
html_logo = "images/features/tethys-logo-75.png"
html_favicon = "images/default_favicon.ico"
html_static_path = ["_static"]
html_css_files = [
    "css/tethys.css",
]

html_theme = "sphinxawesome_theme"
html_theme_options = {
    "extra_header_links": {
        "Tutorials": "tutorials",
        "SDK": "tethys_sdk",
        "CLI": "tethys_cli",
        "Tethys Portal": "tethys_portal",
        "Migrate Apps": "whats_new/app_migration",
        "GitHub": "https://github.com/tethysplatform/tethys",
    },
    "show_breadcrumbs": False,
    "show_prev_next": True,
    "show_scrolltop": True,
}

html_collapsible_definitions = True

# Link icon for header links instead of pharagraph icons that are the default
html_permalinks_icon = (
    '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">'
    '<path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 '
    "5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 "
    '0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z">'
    "</path></svg>"
)
