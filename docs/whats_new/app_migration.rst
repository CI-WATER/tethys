.. _migrate_3_to_4:

*********************************
Migrating Apps from Tethys 3 to 4
*********************************

**Last Updated:** May 2022

This guide describes how to migrate Tethys 3 apps to work in Tethys 4. There are several "breaking" changes that were introduced in Tethys 4 that may cause apps developed in Tethys 3 to not load or function properly. Use the tips below to help you make the changes necessary for the app to function properly in Tethys 4.

.. note::

    To migrate an app developed for Tethys 2 to Tethys 4, you will need to first complete the steps found in the :ref:`migrate_2_to_3` guide.

Index Controller
================

The ``index`` property of the :term:`app class` is used to tell Tethys which controller should be used for the home page of the app. In Tethys 4, the app namespace portion (the part before the ``:``) should be dropped.

For example, a Tethys app with an ``index`` property looking like this:

.. code-block:: python
    :emphasize-lines: 2

    class MyFirstApp(TethysAppBase):
        index = "my_first_app:home"

should be changed to this:

.. code-block:: python
    :emphasize-lines: 2

    class MyFirstApp(TethysAppBase):
        index = "home"

Controller Decorators
=====================

The ``url_maps()`` method is being deprecated in favor of the simpler ``controller`` decorator method introduced in Tethys 4. Therefore, it is recommended that apps are migrated to use the ``controller`` decorator and remove the ``url_maps()`` method fsrom the :file:`app.py`. Use the following tips to help you migrate:

1. Review the :ref:`url_maps_api` documentation to become familiar with the ``controller`` decorator.
2. If your app has a lot of controllers, use the ``url_maps()`` in :file:`app.py` to make a list them. There should be one controller function or class for each ``UrlMap`` listed.
3. Add the ``controller`` decorator to each controller function or class in your app.
4. If the default URL or name generated by the ``controller`` decorator don't match what is set in the ``UrlMap``, override it by setting the ``url`` and ``name`` arguments of the controller decorator.
5. If your controller uses any other decorators, remove them and use the appropriate arguments in the ``controller`` decorator.
6. Remove the ``url_maps()`` method from the :file:`app.py`.

.. note::

    Tethys 4 also introduces the ``consumer`` and ``handler`` decorators that function equivalently for consumers and handler functions. See the :ref:`url_maps_api` documentation for more details.

Theme and Styles
================

The frontend CSS framework, Bootstrap, was upgraded from version 3 to version 5 in Tethys Platform 4. As a result, any Boostrap components that are used in templates will need to be updated to use the `Bootstrap 5 <https://getbootstrap.com/docs/5.0/getting-started/introduction/>`_ syntax so they function and look as expected. This section describes how to update the most common Bootstrap components that are used in Tethys Apps.

.. note::

    The app base templates and Template Gizmos have all been updated to use Bootstrap 5. You should only need to upgrade Bootstrap code that is contained in your app. The Gizmos that are used by your app will be automatically upgraded.

Bootstrap Icons
---------------

The glyphicons that were included in Bootstrap 3 were moved to a separate library called `Bootstrap Icons <https://icons.getbootstrap.com/>`_. The Bootstrap Icons use a different syntax than glyphicons, so any glyphicons that are used in your app will not show up in Tethys Platform 4.

However, Tethys Platform 4 includes the Boostrap Icons library in the base template for apps, so the only change that you should need to make is to update the icon to an equivalent Bootstrap Icon:

.. code-block:: html

    <i class="bi bi-home"></i>

The Bootstrap Icons library has many more icons than the Bootstrap 3 glyphicon library, however the names of many icons have changed. For example ``glyphicon-pencil`` featured a *filled* pencil icon, but ``bi-pencil`` is an *outlined* pencil icon. To use the equivalent Bootstrap Icon, you will need to use the ``bi-pencil-fill`` icon. Fortunately, the `Bootstrap Icons <https://icons.getbootstrap.com/>`_ website has an excellent search capability that makes it easy to find equivalent icons.

For example, if your app had the following glyphicons:

.. code-block:: html

    <span class="glyphicon glyhpicon-home" aria-hidden="true"></span>
    <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
    <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>

you could update them to use the following equivalent Bootstrap Icons:

.. code-block:: html

    <i class="bi bi-house-door-fill"></i>
    <i class="bi bi-trash"></i>
    <i class="bi bi-save"></i>

App Navigation
--------------

The navigation items that are used in the ``app_navigation_items`` block of your templates (usually in the :file:`base.html`) need to have slight changes made to work properly. To update the navigation elements do the following:

1. Add a ``nav-item`` class on each ``<li>`` element.
2. Add a class ``nav-link`` on each ``<a>`` element.
3. Move the ``active`` class (if applicable) from the ``<li>`` element to the ``<a>`` element.

For example, an old ``app_navigation_items`` block like this:

.. code-block:: html+django

    {% block app_navigation_items %}
      <li class="title">App Navigation</li>
      <li class="active"><a href="">Home</a></li>
      <li><a href="">Jobs</a></li>
      <li class="separator"></li>
      <li><a href="">Get Started</a></li>
    {% endblock %}


should be changed to this:

.. code-block:: html+django

    {% block app_navigation_items %}
      <li class="nav-item title">App Navigation</li>
      <li class="nav-item"><a class="nav-link active" href="">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="">Jobs</a></li>
      <li class="nav-item separator"></li>
      <li class="nav-item"><a class="nav-link" href="">Get Started</a></li>
    {% endblock %}

Buttons
-------

The ``btn-default`` class no longer exists in Bootstrap 5. Change it to ``btn-outline-secondary`` for a similar looking button. Alternatively, choose from several new options that can be found here: `Boostrap Buttons <https://getbootstrap.com/docs/5.0/components/buttons/>`_.

Tooltips
--------

Modals
------

Gizmos
------

Although Gizmos have been updated to use Bootstrap 5, some arguments passed to them may include Bootstrap 3 references. For example, the Button and TextInput Gizmos accept the names of icons to be displayed on them. Other arguments to check are ``attributes``, ``classes``, and ``style`` that may have old Bootstrap 3 values that need to be updated.

For example, to update this Button Gizmo to have the equivalent style and icon:

.. code-block:: python
    :emphasize-lines: 3

    add_button = Button(
        display_text='Add',
        icon='glyphicon glyphicon-plus',
        style='success',
    )

change the value of ``icon`` (without the ``bi`` portion) of the Bootstrap Icon:

.. code-block:: python
    :emphasize-lines: 3
    
    add_button = Button(
        display_text='Add',
        icon='plus-circle-fill',
        style='success',
    )

Schedulers
==========

.. _app_migration_older_apps:

Upgrade Older Apps
==================

To upgrade apps that are several versions behind, complete the app migration process for each version in order. For example, to upgrade an app developed in Tethys 2 to Tethys 4, first complete the "2 to 3" migration instructions and then complete the "3 to 4" instructions.

.. toctree::

    app_migration/app_migration_2_to_3
